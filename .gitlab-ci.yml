default:
  image:
    name: registry.gitlab.com/joshuader6/docker-python:main
    pull_policy: always

  tags:
    - "saas-linux-small-amd64"
    - "docker"

variables:
  CACHE_KEY: $CI_COMMIT_REF_SLUG
  PY_PACKAGE_PATH: wodoo_rpc
  BUMP_TARGET:
    value: ""
    description: Specifies how to Bump the Package version. https://python-poetry.org/docs/cli/#version
  TAG_NOTE:
    value: ""
    description: Note that will be added to the Release Tag when using BUMP_TARGET

cache: &global_cache
  key: "$CACHE_KEY"
  paths:
    - .venv
  policy: pull

.before_script_default: &before_script_default
  - poetry --version
  - poetry config virtualenvs.in-project true
  - poetry install --sync -vv
  - source `poetry env info --path`/bin/activate

before_script:
  - *before_script_default

stages:
  - prelint
  - lint
  - test
  - build
  - publish

poetry:
  stage: prelint
  cache:
    <<: *global_cache
    policy: push
  rules:
    - if: '$CI_BUILD_AND_PUSH!="true"'
  script:
    - poetry check
    - poetry lock --check

pylint:
  stage: lint
  rules:
    - if: '$CI_BUILD_AND_PUSH!="true"'
  script:
    - pylint --version
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter $PY_PACKAGE_PATH > codeclimate.json
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter $PY_PACKAGE_PATH > pylint.html
    - pylint $PY_PACKAGE_PATH
  artifacts:
    when: always
    paths:
      - pylint.html
    reports:
      codequality: codeclimate.json

flake8:
  stage: lint
  rules:
    - if: '$CI_BUILD_AND_PUSH!="true"'
  script:
    - flake8 --format junit-xml . > flake8.xml
  artifacts:
    when: always
    reports:
      junit: flake8.xml

pydocstyle:
  stage: lint
  rules:
    - if: '$CI_BUILD_AND_PUSH!="true"'
  script:
    - pydocstyle .

mypy:
  stage: lint
  rules:
    - if: '$CI_BUILD_AND_PUSH!="true"'
  script:
    - mypy --junit-xml=mypy.xml .
  artifacts:
    when: always
    reports:
      junit: mypy.xml

pytest:
  stage: test
  rules:
    - if: '$CI_BUILD_AND_PUSH!="true"'
  script:
    - pytest --junitxml=report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml

bump version:
  stage: build
  cache: []
  variables:
    GIT_STRATEGY: clone # Ensure we start with a clean Repo here
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $BUMP_TARGET"
  before_script:
    - git remote set-url origin "https://gitlab-ci-token:${CI_JOB_TOKEN}@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
  script:
    - |
      VERSION=$(poetry version --short)
      poetry version $BUMP_TARGET
      BUMPED_VERSION=$(poetry version --short)
    - |
      git add --all
      git commit -m "[BUMP] Package $VERSION to $BUMPED_VERSION"
    - |
      TAG_MESSAGE="CI Release for $BUMPED_VERSION"
      [ ! -z "$TAG_NOTE" ] && TAG_MESSAGE=$(echo -e "$TAG_MESSAGE\n\n$TAG_NOTE")
      TAG_NAME="Version-$BUMPED_VERSION"
      echo "Creating Tag '$TAG_NAME' with Message '$TAG_MESSAGE'"
      git tag -a "$TAG_NAME" -m "$TAG_MESSAGE"
    - git push -o ci.skip origin HEAD:$CI_COMMIT_REF_NAME
    - git push origin -o ci.variable="CI_BUILD_AND_PUSH=true" -o ci.variable="CACHE_KEY=$CI_COMMIT_REF_SLUG" --tags

build:
  stage: build
  rules:
    - if: '$CI_BUILD_AND_PUSH=="true"'
  script:
    - poetry build
  artifacts:
    paths:
      - dist/*

publish:
  stage: publish
  cache: []
  variables:
    PYPI_API_TOKEN: $PYPI_API_TOKEN
  rules:
    - if: '$CI_BUILD_AND_PUSH=="true"'
  before_script:
    - poetry config pypi-token.pypi $PYPI_API_TOKEN
  script:
    - poetry publish
